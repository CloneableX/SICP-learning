(define (pseudoremainder-terms L1 L2)
  (let ((t1 (first-term L1))
	(t2 (first-term L2)))
    (let ((O1 (order t1))
	  (O2 (order t2))
	  (c (coeff t2)))
      (let ((factor (exp c (- (+ 1 O1) O2))))
	(let ((new-L1 (mul-term-by-all-terms (make-term 0 factor) L1)))
	  (div-terms new-L1 L2))))))

(define (gcd-terms L1 L2)
  (if (empty-termlist? L2)
      (let ((coeffs (map coeff L1)))
	(let ((gcd-coeffs (gcd coeffs)))
	  (map
	   (lambda (term) (make-term (order term)
				     (/ (coeff term) gcd-coeffs)))
	   L1)))
      (gcd-terms L2 (pseudoremainder-terms L1 L2))))