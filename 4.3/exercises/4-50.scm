(define (analyze-ramb exp)
  (define (shuffled items)
    (define (swap list p q)
      (let ((ps (list-starting-from s p))
	    (qs (list-starting-from s q)))
	(let ((pv (car ps)))
	  (set-car! ps (car qs))
	  (set-car! qs pv))))
    (define (iter rest-items)
      (if (null? rest-items)
	  items
	  (let ((position (random (length rest-items))))
	    (swap rest 0 position)
	    (iter (cdr rest-items)))))
    (iter items))
  (let ((cprocs (map analyze (amb-choices exp))))
    (lambda (env succeed fail)
      (define (try-next choices)
	(if (null? choices)
	    (fail)
	    ((car choices) env
			   succeed
			   (lambda ()
			     (try-next (cdr choices))))))
      (try-next (shuffled cprocs)))))
