(define (make-connector)
  (define (for-each-except exception proc list)
    (define (loop items)
      (cond ((null? items) 'done)
	    ((eq? (car items) exception) (loop (cdr items)))
	    (else (proc (car items))
		  (loop (cdr items)))))
    (loop list))
  (let ((value false) (informant false) (constraints '()))
    (define (forget-my-value retractor)
      (if (eq? informant retractor)
	  (begin
	    (set! informant false)
	    (for-each-except retractor
			     inform-about-no-value
			     constraints))
	  'ignored))
    (define (set-my-value new-val setter)
      (cond ((not (has-value? me))
	     (set! value new-val)
	     (set! informant setter)
	     (for-each-except setter
			      inform-about-value
			      constraints))
	    ((not (= value new-val))
	     (error "Contradiction" (list value new-val)))
	    (else 'ignored)))
    (define (connect new-constraint)
      (if (not (memq new-constraint constraints))
	  (set! constraints
		(cons new-constraint constraints)))
      (if (has-value? me)
	  (inform-about-value new-constraint))
      'done)
    (define (me request)
      (cond ((eq? request 'has-value?)
	     (if informant true false))
	    ((eq? request 'get-value) value)
	    ((eq? request 'connect) connect)
	    ((eq? request 'set-value!) set-my-value)
	    ((eq? request 'forget-value!) forget-my-value)
	    (else (error "Unknown request: CONNECTOR" request))))
    me))

(define (has-value? connector)
  (connector 'has-value?))
(define (get-value connector)
  (connector 'get-value))
(define (connect connector constraint)
  ((connector 'connect) constraint))
(define (set-value! connector new-value informant)
  ((connector 'set-value!) new-value informant))
(define (forget-value! connector retractor)
  ((connector 'forget-value!) retractor))