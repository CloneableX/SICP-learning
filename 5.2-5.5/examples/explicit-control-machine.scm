(load "simulator.scm")
(load "utils/explicit-control-utils.scm")
(load "utils/environment.scm")

(define the-global-environment (setup-environment))
(define (get-global-environment) the-global-environment)
(define operations
  (list (list 'self-evaluating? self-evaluating?)
	(list 'variable? variable?)
	(list 'quoted? quoted?)
	(list 'lambda? lambda?)
	(list 'application? application?)
	(list 'last-operand? last-operand?)
	(list 'no-operands? no-operands?)
	(list 'begin? begin?)
	(list 'last-exp? last-exp?)
	(list 'primitive-procedure? primitive-procedure?)
	(list 'compound-procedure? compound-procedure?)
	(list 'if? if?)
	(list 'true? true?)
	(list 'assignment? assignment?)
	(list 'definition? definition?)
	(list 'definition-variable definition-variable)
	(list 'definition-value definition-value)
	(list 'define-variable! define-variable!)
	(list 'assignment-variable assignment-variable)
	(list 'assignment-value assignment-value)
	(list 'set-variable-value! set-variable-value!)
	(list 'if-predicate if-predicate)
	(list 'if-consequent if-consequent)
	(list 'if-alternative if-alternative)
	(list 'procedure-parameters procedure-parameters)
	(list 'procedure-body procedure-body)
	(list 'procedure-environment procedure-environment)
	(list 'extend-environment extend-environment)
	(list 'begin-actions begin-actions)
	(list 'first-exp first-exp)
	(list 'rest-exps rest-exps)
	(list 'operator operator)
	(list 'operands operands)
	(list 'first-operand first-operand)
	(list 'rest-operands rest-operands)
	(list 'apply-primitive-procedure apply-primitive-procedure)
	(list 'empty-arglist empty-arglist)
	(list 'adjoin-arg adjoin-arg)
	(list 'lambda-parameters lambda-parameters)
	(list 'lambda-body lambda-body)
	(list 'make-procedure make-procedure)
	(list 'text-of-quotation text-of-quotation)
	(list 'lookup-variable-value lookup-variable-value)
	(list 'prompt-for-input prompt-for-input)
	(list 'get-global-environment get-global-environment)
	(list 'announce-output announce-output)
	(list 'user-print user-print)
	(list 'read read)))

(define driver-loop-controller-text
  '(read-eval-print-loop
      (perform (op initialize-stack))
      (perform
        (op prompt-for-input) (const ";; EC-Eval input:"))
      (assign exp (op read))
      (assign env (op get-global-environment))
      (assign continue (label print-result))
      (goto (label eval-dispatch))
    print-result
      (perform (op announce-output) (const ";; EC-Eval value:"))
      (perform (op user-print) (reg val))
      (goto (label read-eval-print-loop))))

(define explicit-control-controller-text
  '(eval-dispatch
      (test (op self-evaluating?) (reg exp))
      (branch (label ev-self-eval))
      (test (op variable?) (reg exp))
      (branch (label ev-variable))
      (test (op quoted?) (reg exp))
      (branch (label ev-quoted))
      (test (op lambda?) (reg exp))
      (branch (label ev-lambda))
      (test (op definition?) (reg exp))
      (branch (label ev-definition))
      (test (op assignment?) (reg exp))
      (branch (label ev-assignment))
      (test (op if?) (reg exp))
      (branch (label ev-if))
      (test (op begin?) (reg exp))
      (branch (label ev-begin))
      (test (op application?) (reg exp))
      (branch (label ev-application))
      (goto (label unknown-expression-type))
    ev-self-eval
      (assign val (reg exp))
      (goto (reg continue))
    ev-variable
      (assign val (op lookup-variable-value) (reg exp) (reg env))
      (goto (reg continue))
    ev-quoted
      (assign val (op text-of-quotation) (reg exp))
      (goto (reg continue))
    ev-lambda
      (assign unev (op lambda-parameters) (reg exp))
      (assign exp (op lambda-body) (reg exp))
      (assign val (op make-procedure) (reg unev) (reg exp) (reg env))
      (goto (reg continue))
    ev-definition
      (save continue)
      (save env)
      (assign unev (op definition-variable) (reg exp))
      (save unev)
      (assign exp (op definition-value) (reg exp))
      (assign continue (label ev-definition-done))
      (goto (label eval-dispatch))
    ev-definition-done
      (restore unev)
      (restore env)
      (restore continue)
      (perform (op define-variable!) (reg unev) (reg val) (reg env))
      (assign val (const ok))
      (goto (reg continue))
    ev-assignment
      (save continue)
      (save env)
      (assign unev (op assignment-variable) (reg exp))
      (save unev)
      (assign exp (op assignment-value) (reg exp))
      (assign continue (label ev-assignment-done))
      (goto (label eval-dispatch))
    ev-assignment-done
      (restore unev)
      (restore env)
      (restore continue)
      (perform (op set-variable-value!) (reg unev) (reg val) (reg env))
      (goto (reg continue))
    ev-if
      (save continue)
      (assign unev (reg exp))
      (save env)
      (save unev)
      (assign exp (op if-predicate) (reg exp))
      (assign continue (label ev-if-decide))
      (goto (label eval-dispatch))
    ev-if-decide
      (restore unev)
      (restore env)
      (test (op true?) (reg val))
      (branch (label ev-if-consequent))
    ev-if-alternative
      (assign exp (op if-alternative) (reg unev))
      (restore continue)
      (goto (label eval-dispatch))
    ev-if-consequent
      (assign exp (op if-consequent) (reg unev))
      (restore continue)
      (goto (label eval-dispatch))
    ev-begin
      (save continue)
      (assign unev (op begin-actions) (reg exp))
      (goto (label ev-sequence))
    ev-sequence
      (assign exp (op first-exp) (reg unev))
      (test (op last-exp?) (reg unev))
      (branch (label ev-last-sequence))
      (save env)
      (save unev)
      (assign continue (label ev-sequence-continue))
      (goto (label eval-dispatch))
    ev-sequence-continue
      (restore unev)
      (restore env)
      (assign unev (op rest-exps) (reg unev))
      (goto (label ev-sequence))
    ev-last-sequence
      (restore continue)
      (goto (label eval-dispatch))
    ev-application
      (save continue)
      (assign unev (op operands) (reg exp))
      (save env)
      (save unev)
      (assign exp (op operator) (reg exp))
      (assign continue (label ev-appl-did-operator))
      (goto (label eval-dispatch))
    ev-appl-did-operator
      (restore unev)
      (restore env)
      (assign argl (op empty-arglist))
      (assign proc (reg val))
      (test (op no-operands?) (reg unev))
      (branch (label apply-dispatch))
      (save proc)
    ev-appl-operand-loop
      (save argl)
      (assign exp (op first-operand) (reg unev))
      (test (op last-operand?) (reg unev))
      (branch (label ev-appl-last-arg))
      (save env)
      (save unev)
      (assign continue (label ev-appl-accumulate-arg))
      (goto (label eval-dispatch))
     ev-appl-accumulate-arg
       (restore unev)
       (restore env)
       (restore argl)
       (assign argl (op adjoin-arg) (reg argl) (reg val))
       (assign unev (op rest-operands) (reg unev))
       (goto (label ev-appl-operand-loop))
     ev-appl-last-arg
       (assign continue (label ev-appl-accumulate-last-arg))
       (goto (label eval-dispatch))
     ev-appl-accumulate-last-arg
       (restore argl)
       (restore proc)
       (assign argl (op adjoin-arg) (reg argl) (reg val))
       (goto (label apply-dispatch))
     apply-dispatch
       (test (op primitive-procedure?) (reg proc))
       (branch (label primitive-apply))
       (test (op compound-procedure?) (reg proc))
       (branch (label compound-apply))
       (goto (label unknown-procedure-type))
     primitive-apply
       (restore continue)
       (assign val (op apply-primitive-procedure)
	           (reg proc)
		   (reg argl))
       (goto (reg continue))
     compound-apply
       (assign unev (op procedure-parameters) (reg proc))
       (assign env (op procedure-environment) (reg proc))
       (assign env (op extend-environment) (reg unev) (reg argl) (reg env))
       (assign unev (op procedure-body) (reg proc))
       (goto (lable ev-sequence))
     unknown-expression-type
     unknown-procedure-type
     evaluate-done))

(define (make-explicit-control-machine)
  (make-machine '(exp env val continue unev proc argl)
		operations
                explicit-control-controller-text))

(define (machine-evaluate machine exp env continue)
  (set-register-contents! machine 'exp exp)
  (set-register-contents! machine 'env env)
  (set-register-contents! machine 'continue continue)
  (start machine)
  (get-register-contents machine 'val))

(define (start-explicit-evaluator)
  (let ((machine
	 (make-machine '(exp env val continue unev proc argl)
		       operations
		       (append driver-loop-controller-text explicit-control-controller-text))))
    (start machine)))
