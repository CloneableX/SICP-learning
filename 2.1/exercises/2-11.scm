(load "2-8.scm")

(define (neg-interval? i)
  (< (upper-bound i) 0))
(define (pos-interval? i)
  (> (lower-bound i) 0))

(define (mul-interval x y)
  (let ((x1 (lower-bound x))
	(x2 (upper-bound x))
	(y1 (lower-bound y))
	(y2 (upper-bound y)))
    (cond ((or (and (neg-interval? x) (neg-interval? y))
	       (and (pos-interval? x) (pos-interval? y)))
	   (make-interval (* x1 y1) (* x2 y2)))
	  ((and (pos-interval? x) (neg-interval? y))
	   (make-interval (* x2 y1) (* x1 y2)))
	  ((and (neg-interval? x) (span-zero? y))
	   (make-interval (* x1 y2) (* x1 y1)))
	  ((and (pos-interval? x) (span-zero? y))
	   (make-interval (* x2 y1) (* x2 y2)))
	  ((and (span-zero? x) (span-zero? y))
	   (make-interval (min (* x2 y1)
			       (* x1 y2))
			  (max (* x1 y1)
			       (* x2 y2))))
	  (else (mul-interval y x)))))

(print-interval (mul-interval (make-interval 1 2)
			      (make-interval 2 3)))
(print-interval (mul-interval (make-interval -1 -2)
			      (make-interval -2 -3)))
(print-interval (mul-interval (make-interval -1 -2)
			      (make-interval 2 3)))
(print-interval (mul-interval (make-interval 2 3)
			      (make-interval -2 -1)))
(print-interval (mul-interval (make-interval -2 -1)
			      (make-interval -2 3)))
(print-interval (mul-interval (make-interval -2 3)
			      (make-interval -2 -1)))
(print-interval (mul-interval (make-interval 2 3)
			      (make-interval -2 1)))
(print-interval (mul-interval (make-interval -2 1)
			      (make-interval 2 3)))
(print-interval (mul-interval (make-interval -2 1)
			      (make-interval -2 3)))