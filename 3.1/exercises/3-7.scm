(define (security-check password proc)
  (let ((count 0))
    (lambda (enter-password arg)
      (cond ((>= count 7) (lambda (x) "Account Locked!!!"))
	    ((eq? enter-password password)
	     (begin (set! count 0)
		    (proc arg)))
	    (else
	     (begin (set! count (+ count 1))
		    (lambda (x) "Incorrect password")))))))

(define (make-account balance password)
  (define (withdraw amount)
    (if (>= balance amount)
	(begin (set! balance (- balance amount))
	       balance)
	"Insufficient founds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (joint new-password)
      (security-check new-password dispatch))
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
	  ((eq? m 'deposit) deposit)
	  ((eq? m 'joint) joint)
	  (else (error "Unknown request: MAKE-ACCOUNT" m))))
  (security-check password dispatch))

(define (make-joint account secrete-password password)
  ((account secrete-password 'joint) password))

(define peter-acc (make-account 100 'open-sesame))
(define paul-acc (make-joint peter-acc 'open-sesame 'rosebud))

((paul-acc 'rosebud 'withdraw) 10)
((peter-acc 'open-sesame 'withdraw) 20)
